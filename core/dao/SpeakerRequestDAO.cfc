<!--- COMPONENT ---><cfcomponent displayname="SpeakerRequestDAO" output="false" hint="I am the SpeakerRequestDAO class."><!--- Pseudo-constructor ---><cfset variables.instance = {	datasource = ''} /><cffunction name="init" access="public" output="false" returntype="any" hint="I am the constructor method of the SpeakerRequestDAO class.">  <cfargument name="datasource" type="any" required="true" hint="I am the Datasource bean." />  <!--- Set the initial values of the Bean --->  <cfscript>	variables.instance.datasource = arguments.datasource;  </cfscript>  <cfreturn this></cffunction><!--- PUBLIC METHODS ---><!--- CREATE ---><cffunction name="createNewSpeakerRequest" access="public" output="false" returntype="numeric" hint="I insert a new speakerRequest record into the speaker_requests table in the database.">  <cfargument name="speakerRequest" type="any" required="true" hint="I am the SpeakerRequest bean." />  <cfset var qPutSpeakerRequest = '' />  <cfset var insertResult = '' />  <cftry>  <cfquery name="qPutSpeakerRequest" datasource="#variables.instance.datasource.getDSN()#" username="#variables.instance.datasource.getUsername()#" password="#variables.instance.datasource.getPassword()#" result="insertResult">	INSERT INTO speaker_requests		(		  speakerId,		  requestedBy,		  organization,		  email,		  eventName,		  venue,		  eventDate,		  eventTime,		  attendees,		  topic,		  isAccepted,		  isCompleted,		  isActive		) VALUES (		  <cfqueryparam value="#ARGUMENTS.speakerRequest.getSpeakerId()#" cfsqltype="cf_sql_integer" />,		  <cfqueryparam value="#APPLICATION.utils.dataEnc(ARGUMENTS.speakerRequest.getRequestedBy())#" cfsqltype="cf_sql_varchar" />,		  <cfqueryparam value="#ARGUMENTS.speakerRequest.getOrganization()#" cfsqltype="cf_sql_varchar" />,		  <cfqueryparam value="#APPLICATION.utils.dataEnc(ARGUMENTS.speakerRequest.getEmail())#" cfsqltype="cf_sql_varchar" />,		  <cfqueryparam value="#ARGUMENTS.speakerRequest.getEventName()#" cfsqltype="cf_sql_varchar" />,		  <cfqueryparam value="#ARGUMENTS.speakerRequest.getVenue()#" cfsqltype="cf_sql_varchar" />,		  <cfqueryparam value="#ARGUMENTS.speakerRequest.getEventDate()#" cfsqltype="cf_sql_timestamp" />,		  <cfqueryparam value="#ARGUMENTS.speakerRequest.getEventTime()#" cfsqltype="cf_sql_varchar" />,		  <cfqueryparam value="#ARGUMENTS.speakerRequest.getAttendees()#" cfsqltype="cf_sql_integer" />,		  <cfqueryparam value="#ARGUMENTS.speakerRequest.getTopic()#" cfsqltype="cf_sql_varchar" />,		  <cfqueryparam value="#ARGUMENTS.speakerRequest.getIsAccepted()#" cfsqltype="cf_sql_bit" />,		  <cfqueryparam value="#ARGUMENTS.speakerRequest.getIsCompleted()#" cfsqltype="cf_sql_bit" />,		  <cfqueryparam value="#ARGUMENTS.speakerRequest.getIsActive()#" cfsqltype="cf_sql_bit" />		)  </cfquery>  <!--- catch any errors --->  <cfcatch type="any">	<cfset APPLICATION.utils.errorHandler(cfcatch) />	<cfreturn 0 />  </cfcatch>  </cftry>  <!--- return the id generated by the database ---><cfreturn insertResult.GENERATED_KEY /></cffunction><!--- RETRIEVE - BY ID ---><cffunction name="getSpeakerRequestByID" access="public" output="false" returntype="any" hint="I return a SpeakerRequest bean populated with the details of a specific speakerRequest record.">  <cfargument name="id" type="numeric" required="true" hint="I am the numeric auto-increment id of the speakerRequest to search for." />  <cfset var qGetSpeakerRequest = '' />  <cfset var speakerRequestObject = '' />  <cftry>  <cfquery name="qGetSpeakerRequest" datasource="#variables.instance.datasource.getDSN()#" username="#variables.instance.datasource.getUsername()#" password="#variables.instance.datasource.getPassword()#">	SELECT speakerRequestId, speakerId, requestedBy, organization, email, eventName, venue, eventDate, eventTime, attendees, topic, isAccepted, isCompleted, isActive	FROM speaker_requests	WHERE speakerRequestId = <cfqueryparam value="#ARGUMENTS.id#" cfsqltype="cf_sql_integer" />  </cfquery>  <!--- catch any errors --->  <cfcatch type="any">	<cfset APPLICATION.utils.errorHandler(cfcatch) />	<cfreturn createObject('component','core.beans.SpeakerRequest').init() />  </cfcatch>  </cftry>  <cfif qGetSpeakerRequest.RecordCount>    <cfreturn createObject('component','core.beans.SpeakerRequest').init(	speakerRequestId	= qGetSpeakerRequest.speakerRequestId,	speakerId       	= qGetSpeakerRequest.speakerId,	requestedBy     	= APPLICATION.utils.dataDec(qGetSpeakerRequest.requestedBy),	organization    	= qGetSpeakerRequest.organization,	email           	= APPLICATION.utils.dataDec(qGetSpeakerRequest.email),	eventName 			= qGetSpeakerRequest.eventName,	venue           	= qGetSpeakerRequest.venue,	eventDate       	= qGetSpeakerRequest.eventDate,	eventTime       	= qGetSpeakerRequest.eventTime,	attendees       	= qGetSpeakerRequest.attendees,	topic           	= qGetSpeakerRequest.topic,	isAccepted      	= qGetSpeakerRequest.isAccepted,	isCompleted     	= qGetSpeakerRequest.isCompleted,	isActive        	= qGetSpeakerRequest.isActive    ) />  <cfelse>    <cfreturn createObject('component','core.beans.SpeakerRequest').init() />  </cfif></cffunction><!--- UPDATE ---><cffunction name="updateSpeakerRequest" access="public" output="false" returntype="numeric" hint="I update this speakerRequest record in the speaker_requests table of the database.">  <cfargument name="speakerRequest" type="any" required="true" hint="I am the SpeakerRequest bean." />  <cfset var qUpdSpeakerRequest = '' />  <cftry>  <cfquery name="qUpdSpeakerRequest" datasource="#variables.instance.datasource.getDSN()#" username="#variables.instance.datasource.getUsername()#" password="#variables.instance.datasource.getPassword()#">	UPDATE speaker_requests SET	  speakerId = <cfqueryparam value="#ARGUMENTS.speakerRequest.getSpeakerId()#" cfsqltype="cf_sql_int" />,	  requestedBy = <cfqueryparam value="#APPLICATION.utils.dataEnc(ARGUMENTS.speakerRequest.getRequestedBy())#" cfsqltype="cf_sql_varchar" />,	  organization = <cfqueryparam value="#ARGUMENTS.speakerRequest.getOrganization()#" cfsqltype="cf_sql_varchar" />,	  email = <cfqueryparam value="#APPLICATION.utils.dataEnc(ARGUMENTS.speakerRequest.getEmail())#" cfsqltype="cf_sql_varchar" />,	  venue = <cfqueryparam value="#ARGUMENTS.speakerRequest.getVenue()#" cfsqltype="cf_sql_varchar" />,	  eventName = <cfqueryparam value="#ARGUMENTS.speakerRequest.getEventName()#" cfsqltype="cf_sql_varchar" />,	  eventDate = <cfqueryparam value="#ARGUMENTS.speakerRequest.getEventDate()#" cfsqltype="cf_sql_timestamp" />,	  eventTime = <cfqueryparam value="#ARGUMENTS.speakerRequest.getEventTime()#" cfsqltype="cf_sql_varchar" />,	  attendees = <cfqueryparam value="#ARGUMENTS.speakerRequest.getAttendees()#" cfsqltype="cf_sql_int" />,	  topic = <cfqueryparam value="#ARGUMENTS.speakerRequest.getTopic()#" cfsqltype="cf_sql_varchar" />,	  isAccepted = <cfqueryparam value="#ARGUMENTS.speakerRequest.getIsAccepted()#" cfsqltype="cf_sql_bit" />,	  isCompleted = <cfqueryparam value="#ARGUMENTS.speakerRequest.getIsCompleted()#" cfsqltype="cf_sql_bit" />,	  isActive = <cfqueryparam value="#ARGUMENTS.speakerRequest.getIsActive()#" cfsqltype="cf_sql_bit" />	WHERE speakerRequestId = <cfqueryparam value="#ARGUMENTS.speakerRequest.getSpeakerRequestId()#" cfsqltype="cf_sql_integer" />  </cfquery>  <!--- catch any errors --->  <cfcatch type="any">	<cfset APPLICATION.utils.errorHandler(cfcatch) />	<cfreturn 0 />  </cfcatch>  </cftry>  <cfreturn ARGUMENTS.speakerRequest.getSpeakerRequestId() /></cffunction><!--- DELETE ---><cffunction name="deleteSpeakerRequestByID" access="public" output="false" returntype="boolean" hint="I delete a speakerRequest from speakerRequest table in the database.">  <cfargument name="id" type="numeric" required="true" hint="I am the numeric auto-increment id of the speakerRequest to delete." />  <cfset var qDelSpeakerRequest = '' />  <cftry>    <cfquery name="qDelSpeakerRequest" datasource="#variables.instance.datasource.getDSN()#" username="#variables.instance.datasource.getUsername()#" password="#variables.instance.datasource.getPassword()#">		DELETE FROM speaker_requests		WHERE speakerRequestId = <cfqueryparam value="#ARGUMENTS.id#" cfsqltype="cf_sql_integer" />	</cfquery>    <cfcatch type="database">      <cfreturn false />    </cfcatch>  </cftry>  <cfreturn true /></cffunction><!--- UTILITY FUNCTIONS ---><!--- SAVE ---><cffunction name="saveSpeakerRequest" access="public" output="false" returntype="any" hint="I handle saving a speakerRequest either by creating a new entry or updating an existing one.">  <cfargument name="speakerRequest" type="any" required="true" hint="I am the SpeakerRequest bean." />  <cfif exists(ARGUMENTS.speakerRequest)>	<cfreturn updateSpeakerRequest(ARGUMENTS.speakerRequest) />  <cfelse>	<cfreturn createNewSpeakerRequest(ARGUMENTS.speakerRequest) />  </cfif></cffunction><!--- EXISTS ---><cffunction name="exists" access="private" output="false" returntype="boolean" hint="I check to see if a specific SpeakerRequest is in the database, using ID as the check.">  <cfargument name="speakerRequest" type="any" required="true" hint="I am the SpeakerRequest bean." />  <cfset var qGetSpeakerRequest = '' />  <cfquery name="qGetSpeakerRequest" datasource="#variables.instance.datasource.getDSN()#" username="#variables.instance.datasource.getUsername()#" password="#variables.instance.datasource.getPassword()#">	SELECT speakerRequestId FROM speaker_requests	WHERE speakerRequestId = <cfqueryparam value="#ARGUMENTS.speakerRequest.getSpeakerRequestId()#" cfsqltype="cf_sql_integer" />  </cfquery>  <cfif qGetSpeakerRequest.RecordCount>	<cfreturn true />  <cfelse>	<cfreturn false />  </cfif></cffunction></cfcomponent>